import{_ as e,c as s,o as n,a as o}from"./app.3b6acc86.js";const f=JSON.parse('{"title":"VS Code Documentation","description":"","frontmatter":{},"headers":[{"level":2,"title":"Enabling","slug":"enabling"},{"level":2,"title":"Configuring VS Code","slug":"configuring-vs-code"}],"relativePath":"guide/docs-vscode.md"}'),a={name:"guide/docs-vscode.md"},t=o(`<h1 id="vs-code-documentation" tabindex="-1">VS Code Documentation <a class="header-anchor" href="#vs-code-documentation" aria-hidden="true">#</a></h1><p>One of the core features of web components is the ability to create <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements" target="_blank" rel="noopener noreferrer">custom elements</a>, which allow developers to reuse custom functionality defined in their components. When Rindo compiles a project, it generates a custom element for each component in the project. Each of these <a href="./component.html#component-options">custom elements has an associated <code>tag</code> name</a> that allows the custom element to be used in HTML files.</p><p>By default, integrated development environments (IDEs) like VS Code are not aware of a project&#39;s custom elements when authoring HTML. In order to enable more intelligent features in VS Code, such as auto-completion, hover tooltips, etc., developers need to inform it of their project&#39;s custom elements.</p><p>The <code>docs-vscode</code> output target tells Rindo to generate a JSON file containing this information.</p><p>This is an opt-in feature and will save a JSON file containing <a href="https://github.com/microsoft/vscode-custom-data" target="_blank" rel="noopener noreferrer">custom data</a> in a directory specified by the output target. Once the feature is enabled and VS Code is informed of the JSON file&#39;s location, HTML files can gain code editing features similar to TSX files.</p><h2 id="enabling" tabindex="-1">Enabling <a class="header-anchor" href="#enabling" aria-hidden="true">#</a></h2><p>To generate custom element information for VS Code, add the <code>docs-vscode</code> output target to your <code>rindo.config.ts</code>:</p><div class="language-tsx"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Config</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@rindo/core</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> config</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Config</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">outputTargets</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">docs-vscode</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">file</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vscode-data.json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>where <code>file</code> is the name &amp; location of the file to be generated. By default, Rindo assumes that the file will be generated in the project&#39;s root directory.</p><p>To generate the JSON file, have Rindo build your project.</p><h2 id="configuring-vs-code" tabindex="-1">Configuring VS Code <a class="header-anchor" href="#configuring-vs-code" aria-hidden="true">#</a></h2><p>Once the <code>docs-vscode</code> output target has been enabled and the JSON file generated, VS Code needs to be informed of it.</p><p>Recent versions of VS Code have a settings option named <code>html.customData</code>, which resolves to a list of JSON files to use when augmenting the default list of HTML elements. Add the path to the generated JSON file for your project&#39;s types to be added:</p><div class="language-json"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">html.customData</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./vscode-data.json</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,14),l=[t];function p(c,r,i,d,D,y){return n(),s("div",null,l)}const u=e(a,[["render",p]]);export{f as __pageData,u as default};
