import{_ as n,c as s,o as a,a as e}from"./app.3b6acc86.js";const m=JSON.parse(`{"title":"React Integration","description":"","frontmatter":{},"headers":[{"level":2,"title":"Setup","slug":"setup"},{"level":3,"title":"Project Structure","slug":"project-structure"},{"level":3,"title":"Create a React Component Library","slug":"create-a-react-component-library"},{"level":3,"title":"Install the React Output Target in your Rindo Component Library","slug":"install-the-react-output-target-in-your-rindo-component-library"},{"level":3,"title":"Add the React Wrapper Function to your Rindo Component Library","slug":"add-the-react-wrapper-function-to-your-rindo-component-library"},{"level":3,"title":"Add the Components to your React Component Library's Entry File","slug":"add-the-components-to-your-react-component-library-s-entry-file"},{"level":3,"title":"Link Your Packages (Optional)","slug":"link-your-packages-optional"},{"level":2,"title":"Usage","slug":"usage"},{"level":2,"title":"FAQ's","slug":"faq-s"},{"level":3,"title":"What is the best format to write event names?","slug":"what-is-the-best-format-to-write-event-names"},{"level":3,"title":"How do I add IE11 or Edge support?","slug":"how-do-i-add-ie11-or-edge-support"},{"level":2,"title":"API","slug":"api"},{"level":3,"title":"proxiesFile","slug":"proxiesfile"},{"level":3,"title":"includeDefineCustomElements","slug":"includedefinecustomelements"},{"level":3,"title":"excludeComponents","slug":"excludecomponents"}],"relativePath":"guide/react.md"}`),o={name:"guide/react.md"},t=e(`<h1 id="react-integration" tabindex="-1">React Integration <a class="header-anchor" href="#react-integration" aria-hidden="true">#</a></h1><p><strong>Supports: React v16.7+ \u2022 TypeScript 3.7+ \u2022 Rindo v2.16.0+</strong></p><p>Rindo provides a wrapper for your custom elements to be used as first-class React components. The goal of a wrapper is to easily integrate your Rindo components into a specific framework. Wrappers provide a function that you can use within Rindo\u2019s Output Targets to automatically create components for the targeted framework that wrap the web components you create in a Rindo project.</p><p>One benefit of the wrapper pattern includes improved maintainability since you can write code once, and reuse it across different frameworks. Today, there are some challenges associated with using HTML Custom Elements in a React app. Custom events are not handled properly, as well as properties/attributes that are not a string or number. By using Rindo&#39;s component wrappers, you can solve these issues and receive first-class React components.</p><h2 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-hidden="true">#</a></h2><h3 id="project-structure" tabindex="-1">Project Structure <a class="header-anchor" href="#project-structure" aria-hidden="true">#</a></h3><p>To organize the generated component libraries for different frameworks, we recommend using a monorepo structure. This monorepo will contain your Rindo component library as well as the component libraries for whatever frameworks you choose. The overall structure of a monorepo with Rindo and React component libraries might look something like this</p><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">top-most-directory/</span></span>
<span class="line"><span style="color:#A6ACCD;">\u251C\u2500\u2500 rindo-library/</span></span>
<span class="line"><span style="color:#A6ACCD;">\u2502   \u251C\u2500\u2500 rindo.config.js</span></span>
<span class="line"><span style="color:#A6ACCD;">\u2502   \u2514\u2500\u2500 src/components/</span></span>
<span class="line"><span style="color:#A6ACCD;">\u2514\u2500\u2500 react-library/</span></span>
<span class="line"><span style="color:#A6ACCD;">    \u2514\u2500\u2500 src/</span></span>
<span class="line"><span style="color:#A6ACCD;">        \u251C\u2500\u2500 components/</span></span>
<span class="line"><span style="color:#A6ACCD;">        \u2514\u2500\u2500 index.ts</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>To do this, start by creating a monorepo</p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">mkdir {the name of your monorepo}</span></span>
<span class="line"></span></code></pre></div><p>And then move your Rindo component library into your monorepo</p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">mv {the path to your Rindo component library} {the path to your monorepo}</span></span>
<span class="line"></span></code></pre></div><h3 id="create-a-react-component-library" tabindex="-1">Create a React Component Library <a class="header-anchor" href="#create-a-react-component-library" aria-hidden="true">#</a></h3><p>Next, we will need to create the React component library that will wrap your Rindo components. This library will be a sibling to your Rindo component library. Inside your monorepo, you can create your own React project, or you can use the <a href="https://github.com/navify/rindo-ds-react-template" target="_blank" rel="noopener noreferrer">React component library template</a> to bootstrap it. To do this, run the following command</p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">git clone https://github.com/navify/rindo-ds-react-template component-library-react</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> component-library-react</span></span>
<span class="line"><span style="color:#A6ACCD;">npm i</span></span>
<span class="line"></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><strong>NOTE</strong>: If you want to name your React component library something different, add the new name at the end of the clone command like so</p></div><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">git clone https://github.com/navify/rindo-ds-react-template {the name of your React component library}</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> {the name of your React component library}</span></span>
<span class="line"><span style="color:#A6ACCD;">npm i</span></span>
<span class="line"></span></code></pre></div><p>If you do rename your React component library, be sure to change the <code>name</code> in the <code>package.json</code> to match your new name.</p><h3 id="install-the-react-output-target-in-your-rindo-component-library" tabindex="-1">Install the React Output Target in your Rindo Component Library <a class="header-anchor" href="#install-the-react-output-target-in-your-rindo-component-library" aria-hidden="true">#</a></h3><p>Now that the project structure is set up, we can install the React Output Target package in your Rindo component library. This package contains the React wrapper function that we will use to generate our React wrapped components inside a &#39;React component library&#39;. To install the React Output Target package, run the following command in your <strong>Rindo project directory</strong></p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">npm install @rindo/react-output-target</span></span>
<span class="line"></span></code></pre></div><p>Or</p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">yarn add @rindo/react-output-target</span></span>
<span class="line"></span></code></pre></div><h3 id="add-the-react-wrapper-function-to-your-rindo-component-library" tabindex="-1">Add the React Wrapper Function to your Rindo Component Library <a class="header-anchor" href="#add-the-react-wrapper-function-to-your-rindo-component-library" aria-hidden="true">#</a></h3><p>With the React Output Target package installed, we can now configure our Rindo component library to build our React wrapped components (within our React component library). In the <code>rindo.config.ts</code> file of your Rindo component library, add the React wrapper function</p><div class="language-tsx"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Config</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@rindo/core</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">reactOutputTarget</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">react</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@rindo/react-output-target</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> config</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Config</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">  outputTargets: [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">react</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">componentCorePackage</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">your-rindo-library-name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">proxiesFile</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">../your-react-library-name/src/components/rindo-generated/index.ts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">includeDefineCustomElements</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dist</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">esmLoaderPath</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">../loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dist-custom-elements</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>First, make sure to import the <code>reactOutputTarget</code> function from <code>@rindo/react-output-target</code> at the top of the file. With that imported, we can now use it in the <code>outputTargets</code> array and specify the relevant parameters. The <code>componentCorePackage</code> should be the name of your Rindo component library. The <code>proxiesFile</code> is the file that gets generated by the React wrapper function and contains the definitions of all the React wrapper components. Be sure to change the path names to reflect the names of your packages.</p><p>For details on the <code>includeDefineCustomElements</code> option, and all other options, visit the API documentation section below.</p><p>With the <code>reactOutputTarget</code> configured, we can now generate our React wrapped components. In your <strong>Rindo component library</strong> run</p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">npm run build</span></span>
<span class="line"></span></code></pre></div><p>You\u2019ll see the new generated file in your React component library at the location specified by the <code>proxiesFile</code> .</p><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">top-most-directory/</span></span>
<span class="line"><span style="color:#A6ACCD;">\u251C\u2500\u2500 rindo-library/</span></span>
<span class="line"><span style="color:#A6ACCD;">\u2502   \u251C\u2500\u2500 rindo.config.js</span></span>
<span class="line"><span style="color:#A6ACCD;">\u2502   \u2514\u2500\u2500 src/components/</span></span>
<span class="line"><span style="color:#A6ACCD;">\u2514\u2500\u2500 react-library/</span></span>
<span class="line"><span style="color:#A6ACCD;">    \u2514\u2500\u2500 src/</span></span>
<span class="line"><span style="color:#A6ACCD;">        \u2514\u2500\u2500 components/</span></span>
<span class="line"><span style="color:#A6ACCD;">        \u2502   \u2514\u2500\u2500 rindo-generated/</span></span>
<span class="line"><span style="color:#A6ACCD;">        \u2502       \u2514\u2500\u2500 react-component-lib/</span></span>
<span class="line"><span style="color:#A6ACCD;">        \u2502       \u2514\u2500\u2500 index.ts &lt;-- the newly generated file </span></span>
<span class="line"><span style="color:#A6ACCD;">        \u2514\u2500\u2500 index.ts</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="add-the-components-to-your-react-component-library-s-entry-file" tabindex="-1">Add the Components to your React Component Library&#39;s Entry File <a class="header-anchor" href="#add-the-components-to-your-react-component-library-s-entry-file" aria-hidden="true">#</a></h3><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><strong>Note:</strong> If you are using our React template, this should already be prepared for you, and this step can be safely skipped.</p></div><p>In order to make the generated files available within your React component library and its consumers, you\u2019ll need to export everything from within your entry file - commonly the <code>src/index.ts</code> file. To do this, you\u2019ll write:</p><div class="language-tsx"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./components</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="link-your-packages-optional" tabindex="-1">Link Your Packages (Optional) <a class="header-anchor" href="#link-your-packages-optional" aria-hidden="true">#</a></h3><p>If you want to build and test your components locally, you will need to link the packages together. This is a replacement for publishing packages to npm that allows you to develop and test locally. To do this, we\u2019ll use the <code>npm link</code> command. This command creates a global symlink for a given package and thereby allows it to be consumed by other packages in your environment.</p><p>First, build your Rindo component library. In your <strong>Rindo component library</strong>, run</p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">npm run build</span></span>
<span class="line"></span></code></pre></div><p>Now you can create a symlink for your Rindo component library. From within your <strong>Rindo component library</strong>, run</p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">npm link</span></span>
<span class="line"></span></code></pre></div><p>With the symlink created, we next need to specify which packages will be consuming them. Your React component library will need to consume your Rindo component library. In the directory of your <strong>React component library</strong> run</p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">npm link {Rindo library name}</span></span>
<span class="line"></span></code></pre></div><p>And with that, your component libraries are linked together. Now, you can make changes in your Rindo component library and run <code>npm run build</code> to propagate them through to the React component library without having to relink.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><strong>NOTE:</strong> As an alternative to <code>npm link</code> , you can also run <code>npm install</code> with a relative path to your Rindo component library. This strategy, however, will modify your <code>package.json</code> so it is important to make sure you do not commit those changes.</p></div><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-hidden="true">#</a></h2><p>If you are developing and testing your React component library locally, you&#39;ll have to use <code>npm link</code> again to make your React component library available in your React application. If your components are published to npm, you can skip this step.</p><p>To link your React component library, navigate to your <strong>React component library</strong> and run</p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">npm run build</span></span>
<span class="line"><span style="color:#A6ACCD;">npm link</span></span>
<span class="line"></span></code></pre></div><p>To build your React component library and create a symlink to the project.</p><p>Navigate to your <strong>React application directory</strong> and run</p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">npm link {React component library}</span></span>
<span class="line"></span></code></pre></div><p>To make use of your React component library in your React application, import your components from your React component library in the file where you want to use them.</p><div class="language-tsx"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// if your React component library has another name, replace &#39;component-library-react&#39; with that name</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">MyComponent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">component-library-react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>With that, your component is now available to be used like any other React component.</p><h2 id="faq-s" tabindex="-1">FAQ&#39;s <a class="header-anchor" href="#faq-s" aria-hidden="true">#</a></h2><h3 id="what-is-the-best-format-to-write-event-names" tabindex="-1">What is the best format to write event names? <a class="header-anchor" href="#what-is-the-best-format-to-write-event-names" aria-hidden="true">#</a></h3><p>Event names shouldn\u2019t include special characters when initially written in Rindo. Try to lean on using camelCased event names for interoperability between frameworks.</p><h3 id="how-do-i-add-ie11-or-edge-support" tabindex="-1">How do I add IE11 or Edge support? <a class="header-anchor" href="#how-do-i-add-ie11-or-edge-support" aria-hidden="true">#</a></h3><p>If you want your custom elements to be able to work on older browsers, you should add the <code>applyPolyfills()</code> that surround the <code>defineCustomElements()</code> function.</p><div class="language-tsx"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">applyPolyfills</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineCustomElements</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test-components/loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">applyPolyfills</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">defineCustomElements</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-hidden="true">#</a></h2><h3 id="proxiesfile" tabindex="-1">proxiesFile <a class="header-anchor" href="#proxiesfile" aria-hidden="true">#</a></h3><p>This parameter allows you to name the file that contains all the component wrapper definitions produced during the compilation process. This is the first file you should import in your React project.</p><h3 id="includedefinecustomelements" tabindex="-1">includeDefineCustomElements <a class="header-anchor" href="#includedefinecustomelements" aria-hidden="true">#</a></h3><p>If <code>true</code>, React components will import and define elements from the <a href="./custom-elements.html"><code>dist-custom-elements</code> build</a>, rather than <a href="./distribution.html"><code>dist</code></a>.</p><h3 id="excludecomponents" tabindex="-1">excludeComponents <a class="header-anchor" href="#excludecomponents" aria-hidden="true">#</a></h3><p>This lets you exclude wrapping certain Web Components. This is useful if you need to write framework-specific versions of components. In Navify Framework, this is used for routing components, like tabs, so that Navify Framework can integrate better with React&#39;s Router.</p>`,69),p=[t];function l(r,c,i,y,d,u){return a(),s("div",null,p)}const D=n(o,[["render",l]]);export{m as __pageData,D as default};
