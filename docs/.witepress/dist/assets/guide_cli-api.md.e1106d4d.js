import{_ as e,c as s,o as a,a as o}from"./app.3b6acc86.js";const y=JSON.parse('{"title":"Rindo Core CLI API","description":"","frontmatter":{},"headers":[{"level":2,"title":"createNodeLogger()","slug":"createnodelogger"},{"level":2,"title":"createNodeSystem()","slug":"createnodesystem"},{"level":2,"title":"parseFlags()","slug":"parseflags"},{"level":2,"title":"run()","slug":"run"},{"level":2,"title":"runTask()","slug":"runtask"}],"relativePath":"guide/cli-api.md"}'),n={name:"guide/cli-api.md"},t=o(`<h1 id="rindo-core-cli-api" tabindex="-1">Rindo Core CLI API <a class="header-anchor" href="#rindo-core-cli-api" aria-hidden="true">#</a></h1><p>The CLI API can be found at <code>@rindo/core/cli</code> and ran by <code>bin/rindo</code>.</p><h2 id="createnodelogger" tabindex="-1">createNodeLogger() <a class="header-anchor" href="#createnodelogger" aria-hidden="true">#</a></h2><div class="language-tsx"><span class="copy"></span><pre><code><span class="line"><span style="color:#82AAFF;">createNodeLogger</span><span style="color:#A6ACCD;">(process: any): Logger</span></span>
<span class="line"></span></code></pre></div><p>Creates a &quot;logger&quot;, based off of NodeJS APIs, that will be used by the compiler and dev-server. By default the CLI uses this method to create the NodeJS logger. The NodeJS &quot;process&quot; object should be provided as the first argument.</p><h2 id="createnodesystem" tabindex="-1">createNodeSystem() <a class="header-anchor" href="#createnodesystem" aria-hidden="true">#</a></h2><div class="language-tsx"><span class="copy"></span><pre><code><span class="line"><span style="color:#82AAFF;">createNodeSystem</span><span style="color:#A6ACCD;">(process: any): CompilerSystem</span></span>
<span class="line"></span></code></pre></div><p>Creates the &quot;system&quot;, based off of NodeJS APIs, used by the compiler. This includes any and all file system reads and writes using NodeJS. The compiler itself is unaware of Node&#39;s <code>fs</code> module. Other system APIs include any use of <code>crypto</code> to hash content. The NodeJS &quot;process&quot; object should be provided as the first argument.</p><h2 id="parseflags" tabindex="-1">parseFlags() <a class="header-anchor" href="#parseflags" aria-hidden="true">#</a></h2><div class="language-tsx"><span class="copy"></span><pre><code><span class="line"><span style="color:#82AAFF;">parseFlags</span><span style="color:#A6ACCD;">(args: string[]): ConfigFlags</span></span>
<span class="line"></span></code></pre></div><p>Used by the CLI to parse command-line arguments into a typed <code>ConfigFlags</code> object. This is an example of how it&#39;s used internally: <code>parseFlags(process.argv.slice(2))</code>.</p><h2 id="run" tabindex="-1">run() <a class="header-anchor" href="#run" aria-hidden="true">#</a></h2><div class="language-tsx"><span class="copy"></span><pre><code><span class="line"><span style="color:#82AAFF;">run</span><span style="color:#A6ACCD;">(init: CliInitOptions): </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;void&gt;</span></span>
<span class="line"></span></code></pre></div><p>Runs the CLI with the given options. This is used by Rindo&#39;s default <code>bin/rindo</code> file, but can be used externally too.</p><h2 id="runtask" tabindex="-1">runTask() <a class="header-anchor" href="#runtask" aria-hidden="true">#</a></h2><div class="language-tsx"><span class="copy"></span><pre><code><span class="line"><span style="color:#82AAFF;">runTask</span><span style="color:#A6ACCD;">(process: any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> config: Config</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> task: TaskCommand</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  sys</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> CompilerSystem): </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;void&gt;</span></span>
<span class="line"></span></code></pre></div><p>Runs individual tasks giving a NodeJS <code>process</code>, Rindo <code>config</code>, and task command. You can optionally pass in the <code>sys</code> that&#39;s used by the compiler. See <a href="#createnodesystem">createNodeSystem()</a> for more details.</p>`,17),r=[t];function l(c,d,p,i,h,u){return a(),s("div",null,r)}const m=e(n,[["render",l]]);export{y as __pageData,m as default};
