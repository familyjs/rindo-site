import{_ as e,c as s,o as a,a as n}from"./app.3b6acc86.js";const g=JSON.parse('{"title":"Rindo Config","description":"","frontmatter":{},"headers":[{"level":2,"title":"buildEs5","slug":"buildes5"},{"level":2,"title":"bundles","slug":"bundles"},{"level":2,"title":"devServer","slug":"devserver"},{"level":2,"title":"enableCache","slug":"enablecache"},{"level":2,"title":"extras","slug":"extras"},{"level":2,"title":"globalScript","slug":"globalscript"},{"level":2,"title":"globalStyle","slug":"globalstyle"},{"level":2,"title":"hashedFileNameLength","slug":"hashedfilenamelength"},{"level":2,"title":"hashFileNames","slug":"hashfilenames"},{"level":2,"title":"invisiblePrehydration","slug":"invisibleprehydration"},{"level":2,"title":"minifyCss","slug":"minifycss"},{"level":2,"title":"minifyJs","slug":"minifyjs"},{"level":2,"title":"namespace","slug":"namespace"},{"level":2,"title":"outputTargets","slug":"outputtargets"},{"level":2,"title":"plugins","slug":"plugins"},{"level":2,"title":"preamble","slug":"preamble"},{"level":2,"title":"sourceMap","slug":"sourcemap"},{"level":2,"title":"srcDir","slug":"srcdir"},{"level":2,"title":"taskQueue","slug":"taskqueue"},{"level":2,"title":"testing","slug":"testing"}],"relativePath":"guide/config.md"}'),o={name:"guide/config.md"},l=n(`<h1 id="rindo-config" tabindex="-1">Rindo Config <a class="header-anchor" href="#rindo-config" aria-hidden="true">#</a></h1><p>In most cases, the <code>rindo.config.ts</code> file does not require any customization since Rindo comes with great default values out-of-the-box. In general, it&#39;s preferred to keep the config as minimal as possible. In fact, you could even delete the <code>rindo.config.ts</code> file entirely and an app would compile just fine. But at the same time, the compiler can be configured at the lowest levels using this config. Below are the many <em>optional</em> config properties.</p><p>Example <code>rindo.config.ts</code>:</p><div class="language-tsx"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Config</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@rindo/core</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> config</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Config</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">namespace</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">MyApp</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">srcDir</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">src</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><h2 id="buildes5" tabindex="-1">buildEs5 <a class="header-anchor" href="#buildes5" aria-hidden="true">#</a></h2><p>Sets if the ES5 build should be generated or not. It defaults to <code>false</code>. Setting <code>true</code> will also create es5 builds for both dev and prod modes. Setting <code>buildEs5</code> to <code>prod</code> will only build ES5 in prod mode. Basically if the app does not need to run on legacy browsers (IE11 and Edge 18 and below), it&#39;s safe to use the default respectively, <code>buildEs5</code> set to <code>false</code>, which will also speed up production build times. In addition to creating es5 builds, apps may also be interested in enable runtime options to <strong>support</strong> legacy browsers. See <a href="./config-extras.html">config extras</a> for more information.</p><div class="language-tsx"><span class="copy"></span><pre><code><span class="line"><span style="color:#FFCB6B;">buildEs5</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> boolean </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">prod</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><h2 id="bundles" tabindex="-1">bundles <a class="header-anchor" href="#bundles" aria-hidden="true">#</a></h2><p>By default, Rindo will statically analyze the application and generate a component graph of how all the components are interconnected. From the component graph it is able to best decide how components should be grouped depending on their usage with one another within the app. By doing so it&#39;s able to bundle components together in order to reduce network requests. However, bundles can be manually generated using the <code>bundles</code> config.</p><p>The <code>bundles</code> config is an array of objects that represent how components are grouped together in lazy-loaded bundles. This config is rarely needed as Rindo handles this automatically behind the scenes.</p><div class="language-tsx"><span class="copy"></span><pre><code><span class="line"><span style="color:#FFCB6B;">bundles</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">components</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">nav-button</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">components</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">nav-card</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">nav-card-header</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span></code></pre></div><h2 id="devserver" tabindex="-1">devServer <a class="header-anchor" href="#devserver" aria-hidden="true">#</a></h2><p>Please see the <a href="./dev-server.html">Dev-Server docs</a>.</p><h2 id="enablecache" tabindex="-1">enableCache <a class="header-anchor" href="#enablecache" aria-hidden="true">#</a></h2><p><em>default: <code>true</code></em></p><p>Rindo will cache build results in order to speed up rebuilds. To disable this feature, set <code>enableCache</code> to <code>false</code>.</p><div class="language-tsx"><span class="copy"></span><pre><code><span class="line"><span style="color:#FFCB6B;">enableCache</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"></span></code></pre></div><h2 id="extras" tabindex="-1">extras <a class="header-anchor" href="#extras" aria-hidden="true">#</a></h2><p>Please see the <a href="./config-extras.html">Extras docs</a>.</p><h2 id="globalscript" tabindex="-1">globalScript <a class="header-anchor" href="#globalscript" aria-hidden="true">#</a></h2><p>The global script config option takes a file path as a string.</p><p>The global script runs once before your library/app loads, so you can do things like setting up a connection to an external service or configuring a library you are using.</p><p>The code to be executed should be placed within a default function that is exported by the global script. Ensure all of the code in the global script is wrapped in the function that is exported:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// or export default async function()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">initServerConnection</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The exported function can also be <code>async</code>.</p></div><h2 id="globalstyle" tabindex="-1">globalStyle <a class="header-anchor" href="#globalstyle" aria-hidden="true">#</a></h2><p>Rindo is traditionally used to compile many components into an app, and each component comes with its own compartmentalized styles. However, it&#39;s still common to have styles which should be &quot;global&quot; across all components and the website. A global CSS file is often useful to set <a href="./styling.html">CSS Variables</a>.</p><p>Additionally, the <code>globalStyle</code> config can be used to precompile styles with Sass, PostCss, etc.</p><p>Below is an example folder structure containing a webapp&#39;s global css file, named <code>app.css</code>.</p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">src/</span></span>
<span class="line"><span style="color:#A6ACCD;">  components/</span></span>
<span class="line"><span style="color:#A6ACCD;">  global/</span></span>
<span class="line"><span style="color:#A6ACCD;">    app.css</span></span>
<span class="line"></span></code></pre></div><p>The global style config takes a file path as a string. The output from this build will go to the <code>buildDir</code>. In this example it would be saved to <code>www/build/app.css</code>.</p><div class="language-tsx"><span class="copy"></span><pre><code><span class="line"><span style="color:#FFCB6B;">globalStyle</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">src/global/app.css</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>Check out the <a href="./styling.html#global-styles">styling docs</a> of how to use global styles in your app.</p><h2 id="hashedfilenamelength" tabindex="-1">hashedFileNameLength <a class="header-anchor" href="#hashedfilenamelength" aria-hidden="true">#</a></h2><p><em>default: <code>8</code></em></p><p>When the <code>hashFileNames</code> config is set to <code>true</code>, and it is a production build, the <code>hashedFileNameLength</code> config is used to determine how many characters the file name&#39;s hash should be.</p><div class="language-tsx"><span class="copy"></span><pre><code><span class="line"><span style="color:#FFCB6B;">hashedFileNameLength</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span></span>
<span class="line"></span></code></pre></div><h2 id="hashfilenames" tabindex="-1">hashFileNames <a class="header-anchor" href="#hashfilenames" aria-hidden="true">#</a></h2><p><em>default: <code>true</code></em></p><p>During production builds, the content of each generated file is hashed to represent the content, and the hashed value is used as the filename. If the content isn&#39;t updated between builds, then it receives the same filename. When the content is updated, then the filename is different. By doing this, deployed apps can &quot;forever-cache&quot; the build directory and take full advantage of content delivery networks (CDNs) and heavily caching files for faster apps.</p><div class="language-tsx"><span class="copy"></span><pre><code><span class="line"><span style="color:#FFCB6B;">hashFileNames</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"></span></code></pre></div><h2 id="invisibleprehydration" tabindex="-1">invisiblePrehydration <a class="header-anchor" href="#invisibleprehydration" aria-hidden="true">#</a></h2><p><em>default: <code>true</code></em></p><p>When <code>true</code>, <code>invisiblePrehydration</code> will visually hide components before they are hydrated by adding an automatically injected style tag to the document&#39;s head. Setting <code>invisiblePrehydration</code> to <code>false</code> will not inject the style tag into the head, allowing you to style your web components pre-hydration.</p><div class="warning custom-block"><p class="custom-block-title">Note: Setting <code>invisiblePrehydration</code> to <code>false</code> will cause everything to be visible when your page is loaded, causing more prominent Flash of Unstyled Content (FOUC). However, you can style your web component&#39;s fallback content to your preference.</p></div><div class="language-tsx"><span class="copy"></span><pre><code><span class="line"><span style="color:#FFCB6B;">invisiblePrehydration</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"></span></code></pre></div><h2 id="minifycss" tabindex="-1">minifyCss <a class="header-anchor" href="#minifycss" aria-hidden="true">#</a></h2><p><em>default: <code>true</code> in production</em></p><p>When <code>true</code>, the browser CSS file will be minified.</p><h2 id="minifyjs" tabindex="-1">minifyJs <a class="header-anchor" href="#minifyjs" aria-hidden="true">#</a></h2><p><em>default: <code>true</code> in production</em></p><p>When <code>true</code>, the browser JS files will be minified. Rindo uses <a href="https://terser.org/" target="_blank" rel="noopener noreferrer">Terser</a> under-the-hood for file minification.</p><h2 id="namespace" tabindex="-1">namespace <a class="header-anchor" href="#namespace" aria-hidden="true">#</a></h2><p><em>default: <code>App</code></em></p><p>The <code>namespace</code> config is a <code>string</code> representing a namespace for the app. For apps that are not meant to be a library of reusable components, the default of <code>App</code> is just fine. However, if the app is meant to be consumed as a third-party library, such as <code>Navify</code>, a unique namespace is required.</p><div class="language-tsx"><span class="copy"></span><pre><code><span class="line"><span style="color:#FFCB6B;">namespace</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Navify</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><h2 id="outputtargets" tabindex="-1">outputTargets <a class="header-anchor" href="#outputtargets" aria-hidden="true">#</a></h2><p>Please see the <a href="./output-targets.html">Output Target docs</a>.</p><h2 id="plugins" tabindex="-1">plugins <a class="header-anchor" href="#plugins" aria-hidden="true">#</a></h2><p>Please see the <a href="./plugins.html">Plugin docs</a>.</p><h2 id="preamble" tabindex="-1">preamble <a class="header-anchor" href="#preamble" aria-hidden="true">#</a></h2><p><em>default: <code>undefined</code></em></p><p>Used to help to persist a banner or add relevant information about the resulting build, the <code>preamble</code> configuration field is a <code>string</code> that will be converted into a pinned comment and placed at the top of all emitted JavaScript files, with the exception of any emitted polyfills. Escaped newlines may be placed in the provided value for this field and will be honored by Rindo.</p><p>Example:</p><div class="language-tsx"><span class="copy"></span><pre><code><span class="line"><span style="color:#FFCB6B;">preamble</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Built with Rindo</span><span style="color:#A6ACCD;">\\n</span><span style="color:#C3E88D;">Copyright (c) SomeCompanyInc.</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>Will generate the following comment:</p><div class="language-tsx"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">/*!</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Built with Rindo</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Copyright (c) SomeCompanyInc.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span></code></pre></div><h2 id="sourcemap" tabindex="-1">sourceMap <a class="header-anchor" href="#sourcemap" aria-hidden="true">#</a></h2><p><em>default: <code>false</code></em></p><p>When set to <code>true</code>, sourcemaps will be generated for a project.</p><div class="language-tsx"><span class="copy"></span><pre><code><span class="line"><span style="color:#FFCB6B;">sourceMap</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"></span></code></pre></div><p>Sourcemaps create a translation between Rindo components that are written in TypeScript/JSX and the resulting JavaScript that is output by Rindo. Enabling source maps in your project allows for an improved debugging experience for Rindo components. For example, they allow external tools (such as an Integrated Development Environment) to add breakpoints directly in the original source code, which allows you to &#39;step through&#39; your code line-by-line, to inspect the values held in variables, to observe logic flow, and more.</p><p>Please note: Rindo will always attempt to minify a component&#39;s source code as much as possible during compilation. When <code>sourceMap</code> is enabled, it is possible that a slightly different minified result will be produced by Rindo when compared to the minified result produced when <code>sourceMap</code> is not enabled.</p><p>Developers are responsible for determining whether or not they choose to serve sourcemaps in each environment their components are served and implementing their decision accordingly.</p><p>When omitted or set to <code>false</code>, sourcemaps will not be generated.</p><h2 id="srcdir" tabindex="-1">srcDir <a class="header-anchor" href="#srcdir" aria-hidden="true">#</a></h2><p><em>default: <code>src</code></em></p><p>The <code>srcDir</code> config specifies the directory which should contain the source typescript files for each component. The standard for Rindo apps is to use <code>src</code>, which is the default.</p><div class="language-tsx"><span class="copy"></span><pre><code><span class="line"><span style="color:#FFCB6B;">srcDir</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">src</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><h2 id="taskqueue" tabindex="-1">taskQueue <a class="header-anchor" href="#taskqueue" aria-hidden="true">#</a></h2><p><em>default: <code>async</code></em></p><p>Sets the task queue used by rindo&#39;s runtime. The task queue schedules DOM read and writes across the frames to efficiently render and reduce layout thrashing. By default, the <code>async</code> is used. It&#39;s recommended to also try each setting to decide which works best for your use-case. In all cases, if your app has many CPU intensive tasks causing the main thread to periodically lock-up, it&#39;s always recommended to try <a href="./web-workers.html">Web Workers</a> for those tasks.</p><ul><li><p><code>congestionAsync</code>: DOM reads and writes are scheduled in the next frame to prevent layout thrashing. When the app is heavily tasked and the queue becomes congested it will then split the work across multiple frames to prevent blocking the main thread. However, it can also introduce unnecessary reflows in some cases, especially during startup. <code>congestionAsync</code> is ideal for apps running animations while also simultaneously executing intensive tasks which may lock-up the main thread.</p></li><li><p><code>async</code>: DOM read and writes are scheduled in the next frame to prevent layout thrashing. During intensive CPU tasks it will not reschedule rendering to happen in the next frame. <code>async</code> is ideal for most apps, and if the app has many intensive tasks causing the main thread to lock-up, it&#39;s recommended to try <a href="./web-workers.html">Web Workers</a> rather than the congestion async queue.</p></li><li><p><code>immediate</code>: Makes writeTask() and readTask() callbacks to be executed synchronously. Tasks are not scheduled to run in the next frame, but do note there is at least one microtask. The <code>immediate</code> setting is ideal for apps that do not provide long-running and smooth animations. Like the async setting, if the app has intensive tasks causing the main thread to lock-up, it&#39;s recommended to try <a href="./web-workers.html">Web Workers</a>.</p></li></ul><div class="language-tsx"><span class="copy"></span><pre><code><span class="line"><span style="color:#FFCB6B;">taskQueue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">async</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><h2 id="testing" tabindex="-1">testing <a class="header-anchor" href="#testing" aria-hidden="true">#</a></h2><p>Please see the <a href="./testing-config.html">testing config docs</a>.</p>`,86),t=[l];function p(i,c,r,d,h,u){return a(),s("div",null,t)}const f=e(o,[["render",p]]);export{g as __pageData,f as default};
