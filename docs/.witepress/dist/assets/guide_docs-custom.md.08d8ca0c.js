import{_ as t,c as o,o as e,a as s}from"./app.3b6acc86.js";const m=JSON.parse('{"title":"Custom Docs Generation","description":"","frontmatter":{},"headers":[{"level":2,"title":"Config","slug":"config"},{"level":2,"title":"JsonDocs","slug":"jsondocs"},{"level":2,"title":"JsonDocsComponent","slug":"jsondocscomponent"}],"relativePath":"guide/docs-custom.md"}'),n={name:"guide/docs-custom.md"},a=s(`<h1 id="custom-docs-generation" tabindex="-1">Custom Docs Generation <a class="header-anchor" href="#custom-docs-generation" aria-hidden="true">#</a></h1><p>Rindo exposes an output target titled <code>docs-custom</code> where users can access the generated docs json data. This feature can be used to generate custom markdown or to execute other logic on the json data during the build. As with other docs output targets, <code>strict</code> mode is supported.</p><p>To make use of this output target, simply add the following to your Rindo configuration.</p><div class="language-tsx"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Config</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@rindo/core</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> config</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Config</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">outputTargets</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">docs-custom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#82AAFF;">generator</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">docs</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">JsonDocs</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">// Custom logic goes here</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><h2 id="config" tabindex="-1">Config <a class="header-anchor" href="#config" aria-hidden="true">#</a></h2><table><thead><tr><th>Property</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td><code>generator</code></td><td>A function with the docs json data as argument.</td><td></td></tr><tr><td><code>strict</code></td><td>If set to true, Rindo will output a warning whenever there is missing documentation.</td><td><code>false</code></td></tr></tbody></table><h1 id="custom-docs-data-model" tabindex="-1">Custom Docs Data Model <a class="header-anchor" href="#custom-docs-data-model" aria-hidden="true">#</a></h1><p>The generated docs JSON data will in the type of <code>JsonDocs</code> which consists of main <code>components</code> array which consists of components that rindo core found and meta information such as <code>timestamp</code> and <code>compiler</code></p><h2 id="jsondocs" tabindex="-1">JsonDocs <a class="header-anchor" href="#jsondocs" aria-hidden="true">#</a></h2><table><thead><tr><th>Property</th><th>Description</th></tr></thead><tbody><tr><td><code>components</code></td><td>Array with type of <code>JsonDocsComponent[]</code> which consists component information</td></tr><tr><td><code>timestamp</code></td><td><code>string</code> with timestamp</td></tr><tr><td><code>compiler</code></td><td><code>Object</code> with <code>typescriptVersion</code>, <code>compiler</code>, and <code>version</code></td></tr></tbody></table><h2 id="jsondocscomponent" tabindex="-1">JsonDocsComponent <a class="header-anchor" href="#jsondocscomponent" aria-hidden="true">#</a></h2><table><thead><tr><th>Property</th><th>Description</th></tr></thead><tbody><tr><td><code>dirPath</code></td><td>Component directory path</td></tr><tr><td><code>fileName</code></td><td>File name</td></tr><tr><td><code>filePath</code></td><td>File path</td></tr><tr><td><code>readmePath</code></td><td>Readme file path</td></tr><tr><td><code>usagesDir</code></td><td>Usages directory path</td></tr><tr><td><code>encapsulation</code></td><td>Component <code>encapsulation</code> type. Possible values are <code>shadow</code>, <code>scoped</code>, <code>none</code></td></tr><tr><td><code>tag</code></td><td>Component tag described in <code>.tsx</code> file</td></tr><tr><td><code>readme</code></td><td>Component readme file first line content</td></tr><tr><td><code>docs</code></td><td>Description written in top of <code>@Component</code> e.g. /** Documentation Example */. If no JSDoc is present, default to any manually written text in the component&#39;s markdown file. Empty otherwise.</td></tr><tr><td><code>docsTags</code></td><td>Annotations (In the way of JSDoc ) written in <code>.tsx</code> file will be collected here</td></tr><tr><td><code>overview</code></td><td>Description written in top of <code>@Component</code> e.g. /** Documentation Example */</td></tr><tr><td><code>usage</code></td><td></td></tr><tr><td><code>props</code></td><td>Array of component properties information</td></tr><tr><td><code>methods</code></td><td>Array of component methods information</td></tr><tr><td><code>events</code></td><td></td></tr><tr><td><code>listeners</code></td><td></td></tr><tr><td><code>styles</code></td><td></td></tr><tr><td><code>slots</code></td><td></td></tr><tr><td><code>parts</code></td><td></td></tr><tr><td><code>dependents</code></td><td>Array of components where current component is used</td></tr><tr><td><code>dependencies</code></td><td>Array of components which is used in current component</td></tr><tr><td><code>dependencyGraph</code></td><td>Describes a tree of components coupling</td></tr></tbody></table>`,12),d=[a];function c(r,p,l,i,h,D){return e(),o("div",null,d)}const u=t(n,[["render",c]]);export{m as __pageData,u as default};
