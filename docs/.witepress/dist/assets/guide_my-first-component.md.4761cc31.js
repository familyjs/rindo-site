import{_ as s,c as n,o as e,a}from"./app.3b6acc86.js";const m=JSON.parse('{"title":"My First Component","description":"","frontmatter":{},"headers":[{"level":2,"title":"So what is really going on here?","slug":"so-what-is-really-going-on-here"},{"level":2,"title":"Component Generator","slug":"component-generator"}],"relativePath":"guide/my-first-component.md"}'),o={name:"guide/my-first-component.md"},p=a(`<h1 id="my-first-component" tabindex="-1">My First Component <a class="header-anchor" href="#my-first-component" aria-hidden="true">#</a></h1><p>Rindo components are created by adding a new file with a .tsx extension, such as my-first-component.tsx, and placing them in the src/components directory. The .tsx extension is required since Rindo components are built using JSX and TypeScript.</p><p>Here is an example of what a Rindo component looks like:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Component</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Prop</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">h</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@rindo/core</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">Component</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">tag</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-first-component</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyComponent</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Indicate that name should be a public property on the component</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">Prop</span><span style="color:#A6ACCD;">() </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        My name is </span><span style="color:#89DDFF;">{this.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">    )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Don&#39;t fully understand what&#39;s going on? Don&#39;t worry, we&#39;ll explain each piece in detail later on.</p></div><p>Once compiled, this component can be used in HTML just like any other tag.</p><div class="language-html"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">my-first-component</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Max</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">my-first-component</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Web Components must have a - in the tag. <code>firstComponent</code> would not be a valid tag name.</p></div><p>When rendered, the browser will display <code>My name is Max</code>.</p><h2 id="so-what-is-really-going-on-here" tabindex="-1">So what is really going on here? <a class="header-anchor" href="#so-what-is-really-going-on-here" aria-hidden="true">#</a></h2><p>Let&#39;s dive in.</p><p>The first piece we see is the <code>@Component</code> decorator. This decorator provides metadata about our component to the Rindo compiler. Information, such as the tag to use, and external styles, can be set here and picked up by the compiler.</p><p>Below the <code>@Component()</code> decorator, we have a standard JavaScript class. This is where you&#39;ll write the bulk of your code to bring your Rindo component to life. Here is where you&#39;d write functions or provide business logic.</p><p>In order for the component to render something to the screen, we must declare a render function that returns JSX. If you&#39;re not sure what JSX is, don&#39;t worry, we&#39;ll go over it in detail in the Templating Docs.</p><p>The quick idea is that our render function needs to return a representation of the HTML we want to push to the DOM.</p><p>The <code>name</code> property on the class also has a decorator applied to it, <code>@Prop()</code>. This decorator tells the compiler that the property is public to the component, and the user should be setting it. We set this property like so:</p><div class="language-html"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">my-first-component</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Max</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">my-first-component</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>Any property decorated with <code>@Prop()</code> is also automatically watched for changes. If a user of our component were to change the element&#39;s <code>name</code> property, our component would fire its <code>render</code> function again, updating the displayed content.</p><h2 id="component-generator" tabindex="-1">Component Generator <a class="header-anchor" href="#component-generator" aria-hidden="true">#</a></h2><p>The Rindo CLI can generate new components for you. If you used one of the starters, you can simply run the <code>generate</code> npm script in your project, which will start the interactive generator.</p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">npm run generate</span></span>
<span class="line"></span></code></pre></div><p>Or you can invoke the Rindo CLI directly with the <code>generate</code> command (<code>g</code> for short). If you don&#39;t have <code>rindo</code> installed globally, prefix the command with <code>npx</code>.</p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">rindo generate</span></span>
<span class="line"></span></code></pre></div><p>You can optionally pass the component tag name directly to the command. Remember that the component tag name needs to be lowercase and contain at least one hyphen. In the second step, the generator will ask you which files to generate. This allows you to bootstrap a stylesheet as well as spec and e2e tests along with the component file.</p><p>All components will be generated within the <code>src/components</code> folder. Within that, a folder will be created with the same name as the component tag name you provided, and within that folder the files will be generated. It is also possible to specify one or multiple sub-folders to generate the component in.</p><p>For example, if you specify <code>pages/page-home</code> as the component tag name, the files will be generated in <code>src/components/pages/page-home</code>.</p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">rindo generate pages/page-home</span></span>
<span class="line"></span></code></pre></div><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">src</span></span>
<span class="line"><span style="color:#A6ACCD;"> |- components</span></span>
<span class="line"><span style="color:#A6ACCD;">     |- pages</span></span>
<span class="line"><span style="color:#A6ACCD;">         |- page-home</span></span>
<span class="line"><span style="color:#A6ACCD;">             |- page-home.css</span></span>
<span class="line"><span style="color:#A6ACCD;">             |- page-home.e2e.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">             |- page-home.spec.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">             |- page-home.tsx</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div>`,28),t=[p];function l(c,r,i,y,d,h){return e(),n("div",null,t)}const F=s(o,[["render",l]]);export{m as __pageData,F as default};
